/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
        TreeNode* recursion(TreeNode *root, const vector<int> &preorder)
        {
                if (preorder.empty())
                        return root;

                int rootVal = preorder.front();

                root = new TreeNode(rootVal);

                if (preorder.size() == 1)
                        return root;

                int cut;
                for (cut = 0; cut < preorder.size(); cut++)
                        if (preorder[cut] > rootVal)
                                break;

                /* 分别用于构建左右子树的数组 */
                vector<int> left(preorder.begin()+1, preorder.begin()+cut), right(preorder.begin()+cut, preorder.end());

                root->left = recursion(root->left, left);
                root->right = recursion(root->right, right);

                /*
                cout << "========" << rootVal << endl;
                for (auto x : left)
                        cout << x << " ";
                cout << endl;
                for (auto x : right)
                        cout << x << " ";
                cout << endl;
                */

                return root;
        }

        TreeNode* bstFromPreorder(vector<int>& preorder) {
                TreeNode *root = nullptr;
                root = recursion(root, preorder);

                return root;
        }
};
